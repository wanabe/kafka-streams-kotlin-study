/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.github.wanabe.kafka_streams_kotlin_study

import org.apache.kafka.common.serialization.Serdes
import org.slf4j.Logger
import org.slf4j.LoggerFactory
import java.sql.Timestamp

class App {
    val brokers = "kafka:9092"
    companion object {
        var logger: Logger = LoggerFactory.getLogger(App::class.java)
    }
}

fun main(args: Array<String>) {
    val app = App()
    val rootTopic = "topics"

    Stream<String, String>(app.brokers, rootTopic, Serdes.String(), Serdes.String()) { root ->
        App.logger.debug("root $root")

        root.foreach { targetTopic, perMinStr ->
            val perMin = perMinStr.toInt()
            App.logger.debug("begin topic \"${targetTopic}\" limit $perMin/min")

            var count = 0
            var base: Long = System.currentTimeMillis()
            Stream(app.brokers, targetTopic, Serdes.String(), Serdes.String()) { inner ->
                App.logger.debug("begin inner $inner")
                inner.foreach { k, v ->
                    val offset = base - System.currentTimeMillis() - count * 60_000L / perMin
                    if (offset > 0) {
                        App.logger.debug("sleep $offset ${Timestamp(base)}")
                        Thread.sleep(offset)
                    } else if (offset < -60_000L) {
                        base = System.currentTimeMillis()
                        count = 0
                        App.logger.debug("refresh ${Timestamp(base)}")
                    }
                    count++
                    while (count > perMin) {
                        count -= perMin
                        base += 60_000L
                        App.logger.debug("reduce $count/$perMin ${Timestamp(base)}")
                    }
                    App.logger.debug("inner $targetTopic -> $k : $v")
                }
            }.start() {
                readLine()
            }
        }
    }.start() {
        readLine()
    }
}
